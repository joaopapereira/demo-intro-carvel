// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: board/v1/api.proto

package boardv1connect

import (
	v1 "backend/gen/board/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "board.v1.MessageService"
)

// MessageServiceClient is a client for the board.v1.MessageService service.
type MessageServiceClient interface {
	AllMessages(context.Context, *connect_go.Request[v1.AllMessagesRequest]) (*connect_go.Response[v1.AllMessagesResponse], error)
	AddMessage(context.Context, *connect_go.Request[v1.AddMessageRequest]) (*connect_go.Response[v1.AddMessageResponse], error)
}

// NewMessageServiceClient constructs a client for the board.v1.MessageService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		allMessages: connect_go.NewClient[v1.AllMessagesRequest, v1.AllMessagesResponse](
			httpClient,
			baseURL+"/board.v1.MessageService/AllMessages",
			opts...,
		),
		addMessage: connect_go.NewClient[v1.AddMessageRequest, v1.AddMessageResponse](
			httpClient,
			baseURL+"/board.v1.MessageService/AddMessage",
			opts...,
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	allMessages *connect_go.Client[v1.AllMessagesRequest, v1.AllMessagesResponse]
	addMessage  *connect_go.Client[v1.AddMessageRequest, v1.AddMessageResponse]
}

// AllMessages calls board.v1.MessageService.AllMessages.
func (c *messageServiceClient) AllMessages(ctx context.Context, req *connect_go.Request[v1.AllMessagesRequest]) (*connect_go.Response[v1.AllMessagesResponse], error) {
	return c.allMessages.CallUnary(ctx, req)
}

// AddMessage calls board.v1.MessageService.AddMessage.
func (c *messageServiceClient) AddMessage(ctx context.Context, req *connect_go.Request[v1.AddMessageRequest]) (*connect_go.Response[v1.AddMessageResponse], error) {
	return c.addMessage.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the board.v1.MessageService service.
type MessageServiceHandler interface {
	AllMessages(context.Context, *connect_go.Request[v1.AllMessagesRequest]) (*connect_go.Response[v1.AllMessagesResponse], error)
	AddMessage(context.Context, *connect_go.Request[v1.AddMessageRequest]) (*connect_go.Response[v1.AddMessageResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/board.v1.MessageService/AllMessages", connect_go.NewUnaryHandler(
		"/board.v1.MessageService/AllMessages",
		svc.AllMessages,
		opts...,
	))
	mux.Handle("/board.v1.MessageService/AddMessage", connect_go.NewUnaryHandler(
		"/board.v1.MessageService/AddMessage",
		svc.AddMessage,
		opts...,
	))
	return "/board.v1.MessageService/", mux
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) AllMessages(context.Context, *connect_go.Request[v1.AllMessagesRequest]) (*connect_go.Response[v1.AllMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("board.v1.MessageService.AllMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) AddMessage(context.Context, *connect_go.Request[v1.AddMessageRequest]) (*connect_go.Response[v1.AddMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("board.v1.MessageService.AddMessage is not implemented"))
}
